# Чистая функция
Возвращает столько же аргументов, сколько передано. Нет побочных эффектов, т.е. не изменяет входные аргументы и окружающую среду.
Т.е. не пишет в файловую систему, не пишет stdout, stderr (print).
Не меняет глобальные переменные.
Пример функция суммы (a+b).

# Типы и структуры данных

# В чем особенность словаря в Питоне, почему ключи должны быть неизменяемыми.
Доступ осуществляется по ключу, а не по индексу. Значения дикт хранятся в неотсортированном порядке и ключи могут храниться не в том порядке, в котором они добавляются.
Могут хранить вложенные словари. Формат JSON.
Словари реализованы как хеш-таблицы с быстрым доступом. Словари хранят ссылки на объекты, а не сами объекты.
d1 = dict(id=1948, name="Washer", size=3)
d2 = dict({"id": 1948, "name": "Washer", "size": 3})
d3 = dict([("id", 1948), ("name", "Washer"), ("size", 3)])
d4 = dict(zip(("id", "name", "size"), (1948, "Washer", 3)))

D = {}.fromkeys(['name', 'age'],123)
d = dict((x, x**2) for x in xrange(5))

# Списки, сеты и tuple. Отличия.
List (список), tuple (кортеж), set (множество)

List (список)
Элементы в списке хранятся последовательно, каждому из них присвоены индексы, начиная с нуля. В отличие от массива, список может хранить объекты любого типа.

Tuple (кортёж)
Кортеж - это неизменяемый и более быстрый аналог списка. Он защищает хранимые данные от непреднамеренных изменений и может использоваться в качестве ключа в словарях

Set (множество)
Множество - это набор уникальных элементов в случайном порядке (неупорядоченный список). Множества примечательны тем, что операция проверки "принадлежит ли объект множеству" происходит значительно быстрее аналогичных операций в других структурах данных.
Особенность Set - не повторяющиеся элементы.
frozenset([1, 2, 3, 4, 5]) - неизменяемый тип данных.

# Многопоточность, многопроцессорность
Многопоточность
thread.start_new_thread ( function, args[, kwargs] )
threading

Многопроцессорность
import multiprocessing

def spawn_process(i):
   print ('This is process: %s' %i)
   return

if __name__ == '__main__':
   Process_jobs = []
   for i in range(3):
   p = multiprocessing.Process(target = spawn_process, args = (i,))
      Process_jobs.append(p)
   p.start()
   p.join()


# Управление с памятью. Gargabe Collector
В Python память управляется автоматически
sys.getrefcount(numbers)

# Зачем нужна БД.
Правильное хранение данных, масштабирование. Нормализация данных. Безопасность.
Более быстрый доступ к информации. Не нужно писать свой движок для работы с текстовыми файлами. Индексирование. Добавление новых таблиц.
Ассинхронность.

# Join'ы в БД.
Left, Right, Innter Join, FullJoin.

# Индексы.
Для быстрого получения информации.
Индексы несут дополнительные расходы.

# Django 
Post.objects.get()
Возвращает объект, соответствующий заданному параметры поиска, которые должны быть в формат, описанный в разделе Поиск полей .get() поднимает MultipleObjectsReturned если было найдено более одного объекта. То MultipleObjectsReturned исключение составляет атрибут класса model.get() вызывает исключение DoesNotExist если объект не был найден для данный параметр. Это исключение составляет также является атрибутом класса model. 

Post.objects.filter()
Возвращает новый QuerySet, содержащий объекты, соответствующие заданным параметрам поиска.

В основном используйте get(), когда вы хотите получить один уникальный объект и filter(), когда вы хотите получить все объекты, соответствующие вашим параметрам поиска.

# Декоратор, который считает кол-во вызовов функций.
def counter(func, counter_dict={}):
    counter_dict[func]=0
    def wrap(*args,**kwargs):
        counter_dict[func] += 1
        print("Number of times {} has been called so far {}".format(func.__name__, counter_dict[func]))
        return func(*args,**kwargs)
    return wrap

@counter
def temp1(name):
    print("Calling temp1 {}".format(name))

@counter
def temp2(name):
    print("Calling temp2 {}".format(name))


temp1('1')
temp1('2')
temp2('3')

# map
>>> # исходный список
>>> a = [1, 2, 3, 4, 5]
>>> # функция, возводящая переданное ей число в квадрат
>>> sq = lambda x: x**2
>>> # проверим ее работу
>>> print(sq(5))
25
>>> # получаем список квадратов
>>> b = list(map(sq, a))
>>> print(b)
[1, 4, 9, 16, 25]

# мутабельные или немутабельные
Класс   Описание       Мутабелен?
---------------------------------
bool  булевый тип               -
int   целочисленный тип         -
float число с плавающей запятой -
list  список                    +
tuple кортеж                    -
str   строка                    -
set   множество                 +
dict  словарь                   +



# list comprehesion
[x for x in range(10)]
Для генератора будут использоваться круглые скобки.

# итераторы
простой пример цикл for

# магические методы
с двух знаком подчеркивания и заканчиваются
__init__
__str__
__repr__
и т.д.
